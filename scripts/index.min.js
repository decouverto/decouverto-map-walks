(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports = function (url, cb) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url);
    xhr.onload = function () {
        if (xhr.status === 200) {
            cb(null, JSON.parse(xhr.responseText));
        } else {
            var err = new Error('Cannot get ' + url);
            cb(err);
        }
    };
    xhr.send();
};
},{}],2:[function(require,module,exports){

var getJSON = require('./get-json.js');


var element = document.getElementById('popup');




getJSON('/walks.json', function (err, data) {
    if (err) return console.error(err);

    var markerSource = new ol.source.Vector();

    function addMarker(lon, lat, title) {

        var iconFeature = new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857')),
            title: title
        });

        iconFeature.setStyle(new ol.style.Style({
            image: new ol.style.Icon(({
                anchor: [0.5, 35],
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                opacity: 0.75,
                src: '/images/marker_icon.png'
            }))
        }));

        markerSource.addFeature(iconFeature);
    }

    var map = new ol.Map({
        target: 'map',
        layers: [
            new ol.layer.Tile({
                source: new ol.source.OSM()
            }),
            new ol.layer.Vector({
                source: markerSource
            })
        ],
        view: new ol.View({
            center: [0, 0],
            zoom: 0
        })
    });

    var popup = new ol.Overlay({
        element: element,
        positioning: 'bottom-center',
        stopEvent: false,
        offset: [0, -50]
    });
    map.addOverlay(popup);
    map.on('click', function (e) {
        var feature = map.forEachFeatureAtPixel(e.pixel,
            function (feature) {
                return feature;
            });
        if (feature) {
            var coordinates = feature.getGeometry().getCoordinates();
            popup.setPosition(coordinates);
            $(element).popover({
                placement: 'top',
                html: true,
                content: feature.get('title')
            });
            $(element).popover('show');
        } else {
            $(element).popover('destroy');
        }
    });
    map.on('pointermove', function(e) {
        if (e.dragging) {
          $(element).popover('destroy');
          return;
        }
        var hit = this.forEachFeatureAtPixel(e.pixel, function(feature, layer) {
            return true;
        }); 
        if (hit) {
            this.getTargetElement().style.cursor = 'pointer';
        } else {
            this.getTargetElement().style.cursor = '';
        }
      });

    // set center
    map.getView().setZoom(8);

    // set markers
    barycentre = {
        longitude: 0,
        latitude: 0,
        n: 0
    }

    // set markers
    data.forEach(function (el) {
        addMarker(el.coord.longitude, el.coord.latitude, el.title);
        barycentre.longitude += el.coord.longitude
        barycentre.latitude += el.coord.latitude
        barycentre.n += 1
    });
    barycentre.longitude /= barycentre.n
    barycentre.latitude /= barycentre.n
    map.getView().setCenter(ol.proj.transform([barycentre.longitude, barycentre.latitude], 'EPSG:4326', 'EPSG:3857'));
});
},{"./get-json.js":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZXYvc2NyaXB0cy9nZXQtanNvbi5qcyIsImRldi9zY3JpcHRzL2luZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBjYikge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBjYihudWxsLCBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgJyArIHVybCk7XG4gICAgICAgICAgICBjYihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB4aHIuc2VuZCgpO1xufTsiLCJcbnZhciBnZXRKU09OID0gcmVxdWlyZSgnLi9nZXQtanNvbi5qcycpO1xuXG5cbnZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BvcHVwJyk7XG5cblxuXG5cbmdldEpTT04oJy93YWxrcy5qc29uJywgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XG5cbiAgICB2YXIgbWFya2VyU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3IoKTtcblxuICAgIGZ1bmN0aW9uIGFkZE1hcmtlcihsb24sIGxhdCwgdGl0bGUpIHtcblxuICAgICAgICB2YXIgaWNvbkZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgICAgICAgICBnZW9tZXRyeTogbmV3IG9sLmdlb20uUG9pbnQob2wucHJvai50cmFuc2Zvcm0oW2xvbiwgbGF0XSwgJ0VQU0c6NDMyNicsICdFUFNHOjM4NTcnKSksXG4gICAgICAgICAgICB0aXRsZTogdGl0bGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWNvbkZlYXR1cmUuc2V0U3R5bGUobmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICAgICAgICAgIGltYWdlOiBuZXcgb2wuc3R5bGUuSWNvbigoe1xuICAgICAgICAgICAgICAgIGFuY2hvcjogWzAuNSwgMzVdLFxuICAgICAgICAgICAgICAgIGFuY2hvclhVbml0czogJ2ZyYWN0aW9uJyxcbiAgICAgICAgICAgICAgICBhbmNob3JZVW5pdHM6ICdwaXhlbHMnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuNzUsXG4gICAgICAgICAgICAgICAgc3JjOiAnL2ltYWdlcy9tYXJrZXJfaWNvbi5wbmcnXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIG1hcmtlclNvdXJjZS5hZGRGZWF0dXJlKGljb25GZWF0dXJlKTtcbiAgICB9XG5cbiAgICB2YXIgbWFwID0gbmV3IG9sLk1hcCh7XG4gICAgICAgIHRhcmdldDogJ21hcCcsXG4gICAgICAgIGxheWVyczogW1xuICAgICAgICAgICAgbmV3IG9sLmxheWVyLlRpbGUoe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogbmV3IG9sLnNvdXJjZS5PU00oKVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgb2wubGF5ZXIuVmVjdG9yKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IG1hcmtlclNvdXJjZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSxcbiAgICAgICAgdmlldzogbmV3IG9sLlZpZXcoe1xuICAgICAgICAgICAgY2VudGVyOiBbMCwgMF0sXG4gICAgICAgICAgICB6b29tOiAwXG4gICAgICAgIH0pXG4gICAgfSk7XG5cbiAgICB2YXIgcG9wdXAgPSBuZXcgb2wuT3ZlcmxheSh7XG4gICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIHBvc2l0aW9uaW5nOiAnYm90dG9tLWNlbnRlcicsXG4gICAgICAgIHN0b3BFdmVudDogZmFsc2UsXG4gICAgICAgIG9mZnNldDogWzAsIC01MF1cbiAgICB9KTtcbiAgICBtYXAuYWRkT3ZlcmxheShwb3B1cCk7XG4gICAgbWFwLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBmZWF0dXJlID0gbWFwLmZvckVhY2hGZWF0dXJlQXRQaXhlbChlLnBpeGVsLFxuICAgICAgICAgICAgZnVuY3Rpb24gKGZlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgdmFyIGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpLmdldENvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICBwb3B1cC5zZXRQb3NpdGlvbihjb29yZGluYXRlcyk7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLnBvcG92ZXIoe1xuICAgICAgICAgICAgICAgIHBsYWNlbWVudDogJ3RvcCcsXG4gICAgICAgICAgICAgICAgaHRtbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBmZWF0dXJlLmdldCgndGl0bGUnKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLnBvcG92ZXIoJ3Nob3cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICQoZWxlbWVudCkucG9wb3ZlcignZGVzdHJveScpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbWFwLm9uKCdwb2ludGVybW92ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKGUuZHJhZ2dpbmcpIHtcbiAgICAgICAgICAkKGVsZW1lbnQpLnBvcG92ZXIoJ2Rlc3Ryb3knKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhpdCA9IHRoaXMuZm9yRWFjaEZlYXR1cmVBdFBpeGVsKGUucGl4ZWwsIGZ1bmN0aW9uKGZlYXR1cmUsIGxheWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7IFxuICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICB0aGlzLmdldFRhcmdldEVsZW1lbnQoKS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmdldFRhcmdldEVsZW1lbnQoKS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAvLyBzZXQgY2VudGVyXG4gICAgbWFwLmdldFZpZXcoKS5zZXRab29tKDgpO1xuXG4gICAgLy8gc2V0IG1hcmtlcnNcbiAgICBiYXJ5Y2VudHJlID0ge1xuICAgICAgICBsb25naXR1ZGU6IDAsXG4gICAgICAgIGxhdGl0dWRlOiAwLFxuICAgICAgICBuOiAwXG4gICAgfVxuXG4gICAgLy8gc2V0IG1hcmtlcnNcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGFkZE1hcmtlcihlbC5jb29yZC5sb25naXR1ZGUsIGVsLmNvb3JkLmxhdGl0dWRlLCBlbC50aXRsZSk7XG4gICAgICAgIGJhcnljZW50cmUubG9uZ2l0dWRlICs9IGVsLmNvb3JkLmxvbmdpdHVkZVxuICAgICAgICBiYXJ5Y2VudHJlLmxhdGl0dWRlICs9IGVsLmNvb3JkLmxhdGl0dWRlXG4gICAgICAgIGJhcnljZW50cmUubiArPSAxXG4gICAgfSk7XG4gICAgYmFyeWNlbnRyZS5sb25naXR1ZGUgLz0gYmFyeWNlbnRyZS5uXG4gICAgYmFyeWNlbnRyZS5sYXRpdHVkZSAvPSBiYXJ5Y2VudHJlLm5cbiAgICBtYXAuZ2V0VmlldygpLnNldENlbnRlcihvbC5wcm9qLnRyYW5zZm9ybShbYmFyeWNlbnRyZS5sb25naXR1ZGUsIGJhcnljZW50cmUubGF0aXR1ZGVdLCAnRVBTRzo0MzI2JywgJ0VQU0c6Mzg1NycpKTtcbn0pOyJdfQ==
